{"remainingRequest":"/Users/uratomo/test/node_modules/babel-loader/lib/index.js!/Users/uratomo/test/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/uratomo/test/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/uratomo/test/src/components/Task.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/uratomo/test/src/components/Task.vue","mtime":1593694569635},{"path":"/Users/uratomo/test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/uratomo/test/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/uratomo/test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/uratomo/test/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IGZpcmViYXNlIGZyb20gImZpcmViYXNlIjsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICJUYXNrIiwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgZGF0YWJhc2U6IG51bGwsCiAgICAgIHRvZG9zUmVmOiBudWxsLAogICAgICBuZXdUb2RvTmFtZTogIiIsCiAgICAgIGRlYWRsaW5lOiAiIiwKICAgICAgc2hvd1RvZG9UeXBlOiAiYWxsIiwKICAgICAgdG9kb3M6IFtdCiAgICB9OwogIH0sCiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCgpIHsKICAgIHRoaXMuZGF0YWJhc2UgPSBmaXJlYmFzZS5kYXRhYmFzZSgpOwogICAgdGhpcy51aWQgPSBmaXJlYmFzZS5hdXRoKCkuY3VycmVudFVzZXIudWlkOyAvLyByZWbjga9yZWZlcmVuY2Xjgafjg4fjg7zjgr/jg5njg7zjgrnjgavjgYLjgovnibnlrprjga7poIXnm67jgpLmjIfjgZfnpLrjgZnjg6Hjgr3jg4Pjg4kKCiAgICB0aGlzLnRvZG9zUmVmID0gdGhpcy5kYXRhYmFzZS5yZWYoInRvZG9zLyIgKyB0aGlzLnVpZCk7IC8vIOODh+ODvOOCv+OBq+WkieabtOOBjOOBguOCi+OBqOWun+ihjOOBleOCjOOCi2Z1bmN0aW9uCgogICAgdmFyIF90aGlzID0gdGhpczsKCiAgICB0aGlzLnRvZG9zUmVmLm9uKCd2YWx1ZScsIGZ1bmN0aW9uIChzbmFwc2hvdCkgewogICAgICBfdGhpcy50b2RvcyA9IHNuYXBzaG90LnZhbCgpOyAvLyDjg4fjg7zjgr/jgavlpInljJbjgYzotbfjgY3jgZ/jgajjgY3jgavlho3lj5blvpfjgZnjgosKICAgIH0pOwogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIC8vIOODleOCo+ODq+OCv+ODvOOBruWun+ijhXNob3dUb2RvVHlwZeOBjOWkieabtOOBleOCjOOCi+OBqOWun+ihjOOBleOCjOOCiwogICAgZmlsdGVyZWRUb2RvczogZnVuY3Rpb24gZmlsdGVyZWRUb2RvcygpIHsKICAgICAgaWYgKHRoaXMuc2hvd1RvZG9UeXBlID09ICdhbGwnKSB7CiAgICAgICAgcmV0dXJuIHRoaXMudG9kb3M7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdmFyIHNob3dDb21wbGV0ZSA9IGZhbHNlOwoKICAgICAgICBpZiAodGhpcy5zaG93VG9kb1R5cGUgPT0gJ2NvbXBsZXRlJykgewogICAgICAgICAgc2hvd0NvbXBsZXRlID0gdHJ1ZTsKICAgICAgICB9CgogICAgICAgIHZhciBmaWx0ZXJUb2RvcyA9IHt9OwoKICAgICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy50b2RvcykgewogICAgICAgICAgdmFyIHRvZG8gPSB0aGlzLnRvZG9zW2tleV07CgogICAgICAgICAgaWYgKHRvZG8uaXNDb21wbGV0ZSA9PSBzaG93Q29tcGxldGUpIHsKICAgICAgICAgICAgZmlsdGVyVG9kb3Nba2V5XSA9IHRvZG87CiAgICAgICAgICAgIGNvbnNvbGUubG9nKGZpbHRlclRvZG9zW2tleV0pOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgY29uc29sZS5sb2coZmlsdGVyVG9kb3MpOwogICAgICAgIHJldHVybiBmaWx0ZXJUb2RvczsKICAgICAgfQogICAgfQogIH0sCiAgbWV0aG9kczogewogICAgLy8gRELjga50b2Rvcy9bdWlkXS/ku6XkuIvjgavjg4fjg7zjgr/jgpLmoLzntI3jgZfjgabjgYTjgY8KICAgIGNyZWF0ZVRvZG86IGZ1bmN0aW9uIGNyZWF0ZVRvZG8oKSB7CiAgICAgIGlmICh0aGlzLm5ld1RvZG9OYW1lID09ICIiKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICB0aGlzLnRvZG9zUmVmLnB1c2goewogICAgICAgIG5hbWU6IHRoaXMubmV3VG9kb05hbWUsCiAgICAgICAgaXNDb21wbGV0ZTogZmFsc2UsCiAgICAgICAgZGF0ZTogdGhpcy5kZWFkbGluZQogICAgICB9KTsKICAgICAgdGhpcy5uZXdUb2RvTmFtZSA9ICIiOwogICAgfSwKICAgIC8vIOWujOS6huODu+acquWujOS6huOBruWApOOBruabtOaWsAogICAgdXBkYXRlSXNDb21wbGV0ZVRvZG86IGZ1bmN0aW9uIHVwZGF0ZUlzQ29tcGxldGVUb2RvKHRvZG8sIGtleSkgewogICAgICB0b2RvLmlzQ29tcGxldGUgPSAhdG9kby5pc0NvbXBsZXRlOyAvLyBEQuWGheOBruODh+ODvOOCv+OCkuabtOaWsOOBmeOCiwoKICAgICAgdmFyIHVwZGF0ZXMgPSB7fTsgLy8gdG9kby5pZOOBp+WkieabtOOBmeOCi3RvZG/jgr/jgrnjgq/jgpLmjIflrprjgZfjgIFkYXRh44GM5pu05paw44GV44KM44GfdG9kb+OCkuaMv+WFpeOBmeOCiwoKICAgICAgdXBkYXRlc1trZXldID0gdG9kbzsKICAgICAgdGhpcy50b2Rvc1JlZi51cGRhdGUodXBkYXRlcyk7CiAgICB9LAogICAgLy8gdG9kb+OBruWJiumZpAogICAgZGVsZXRlVG9kbzogZnVuY3Rpb24gZGVsZXRlVG9kbyhrZXkpIHsKICAgICAgdGhpcy50b2Rvc1JlZi5jaGlsZChrZXkpLnJlbW92ZSgpOwogICAgfQogIH0KfTs="},{"version":3,"sources":["Task.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,OAAA,QAAA,MAAA,UAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,MADA;AAEA,EAAA,IAFA,kBAEA;AACA,WAAA;AACA,MAAA,QAAA,EAAA,IADA;AAEA,MAAA,QAAA,EAAA,IAFA;AAGA,MAAA,WAAA,EAAA,EAHA;AAIA,MAAA,QAAA,EAAA,EAJA;AAKA,MAAA,YAAA,EAAA,KALA;AAMA,MAAA,KAAA,EAAA;AANA,KAAA;AAQA,GAXA;AAYA,EAAA,OAAA,EAAA,mBAAA;AACA,SAAA,QAAA,GAAA,QAAA,CAAA,QAAA,EAAA;AACA,SAAA,GAAA,GAAA,QAAA,CAAA,IAAA,GAAA,WAAA,CAAA,GAAA,CAFA,CAGA;;AACA,SAAA,QAAA,GAAA,KAAA,QAAA,CAAA,GAAA,CAAA,WAAA,KAAA,GAAA,CAAA,CAJA,CAKA;;AACA,QAAA,KAAA,GAAA,IAAA;;AACA,SAAA,QAAA,CAAA,EAAA,CAAA,OAAA,EAAA,UAAA,QAAA,EAAA;AACA,MAAA,KAAA,CAAA,KAAA,GAAA,QAAA,CAAA,GAAA,EAAA,CADA,CACA;AACA,KAFA;AAGA,GAtBA;AAuBA,EAAA,QAAA,EAAA;AACA;AACA,IAAA,aAAA,EAAA,yBAAA;AACA,UAAA,KAAA,YAAA,IAAA,KAAA,EAAA;AACA,eAAA,KAAA,KAAA;AACA,OAFA,MAEA;AACA,YAAA,YAAA,GAAA,KAAA;;AACA,YAAA,KAAA,YAAA,IAAA,UAAA,EAAA;AACA,UAAA,YAAA,GAAA,IAAA;AACA;;AACA,YAAA,WAAA,GAAA,EAAA;;AAEA,aAAA,IAAA,GAAA,IAAA,KAAA,KAAA,EAAA;AACA,cAAA,IAAA,GAAA,KAAA,KAAA,CAAA,GAAA,CAAA;;AACA,cAAA,IAAA,CAAA,UAAA,IAAA,YAAA,EAAA;AACA,YAAA,WAAA,CAAA,GAAA,CAAA,GAAA,IAAA;AACA,YAAA,OAAA,CAAA,GAAA,CAAA,WAAA,CAAA,GAAA,CAAA;AACA;AACA;;AACA,QAAA,OAAA,CAAA,GAAA,CAAA,WAAA;AACA,eAAA,WAAA;AACA;AACA;AAtBA,GAvBA;AA+CA,EAAA,OAAA,EAAA;AACA;AACA,IAAA,UAAA,EAAA,sBAAA;AACA,UAAA,KAAA,WAAA,IAAA,EAAA,EAAA;AAAA;AAAA;;AACA,WAAA,QAAA,CAAA,IAAA,CAAA;AACA,QAAA,IAAA,EAAA,KAAA,WADA;AAEA,QAAA,UAAA,EAAA,KAFA;AAGA,QAAA,IAAA,EAAA,KAAA;AAHA,OAAA;AAKA,WAAA,WAAA,GAAA,EAAA;AACA,KAVA;AAWA;AACA,IAAA,oBAAA,EAAA,8BAAA,IAAA,EAAA,GAAA,EAAA;AACA,MAAA,IAAA,CAAA,UAAA,GAAA,CAAA,IAAA,CAAA,UAAA,CADA,CAEA;;AACA,UAAA,OAAA,GAAA,EAAA,CAHA,CAIA;;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,GAAA,IAAA;AACA,WAAA,QAAA,CAAA,MAAA,CAAA,OAAA;AACA,KAnBA;AAoBA;AACA,IAAA,UAAA,EAAA,oBAAA,GAAA,EAAA;AACA,WAAA,QAAA,CAAA,KAAA,CAAA,GAAA,EAAA,MAAA;AACA;AAvBA;AA/CA,CAAA","sourcesContent":["<template>\n  <div class=\"task\">\n     <h2>タスク</h2>\n    <div>\n      <!-- 初期はVーmodelで\"newTodoName\"を入れているが空白、故にタスク作った後に空白にしないとミスが起こる -->\n      <input type=\"text\" v-model=\"newTodoName\">\n      <input type=\"date\" v-model=\"deadline\">\n      <button type=\"submit\" v-on:click=\"createTodo()\">タスク作成</button>\n    </div>\n    <ul>\n      <li><button type=\"submit\" v-on:click=\"showTodoType = 'all'\">すべて</button></li>\n      <li><button type=\"submit\" v-on:click=\"showTodoType = 'active'\">未完タスク一覧</button></li>\n      <li><button type=\"submit\" v-on:click=\"showTodoType = 'complete'\">完了タスク一覧</button></li>\n    </ul>\n    <!-- todoの一覧表示 -->\n    <ul v-for=\"(todo, key) in filteredTodos\" :key=\"todo.id\">\n      <li class=\"card\">\n        <input type=\"checkbox\" v-model=\"todo.isComplete\" v-on:click=\"updateIsCompleteTodo(todo, key)\">\n        <p>{{ todo.name }}</p>\n        <p>{{ todo.date }}</p>\n      </li>\n      <button type=\"submit\" v-on:click=\"deleteTodo(key)\">削除</button>\n    </ul>\n  </div>\n</template>\n\n<script>\nimport firebase from \"firebase\";\n\nexport default {\n  name: \"Task\",\n  data() {\n    return {\n      database: null,\n      todosRef: null,\n      newTodoName: \"\",\n      deadline:\"\",\n      showTodoType: \"all\",\n      todos: []\n    };\n  },\n  created: function() {\n    this.database = firebase.database();\n    this.uid = firebase.auth().currentUser.uid;\n    // refはreferenceでデータベースにある特定の項目を指し示すメソッド\n    this.todosRef = this.database.ref(\"todos/\" + this.uid);\n    // データに変更があると実行されるfunction\n    var _this = this;\n    this.todosRef.on('value', function(snapshot) {\n      _this.todos = snapshot.val(); // データに変化が起きたときに再取得する\n    });\n  },\n  computed: {\n    // フィルターの実装showTodoTypeが変更されると実行される\n    filteredTodos: function () {\n      if (this.showTodoType == 'all') {\n        return this.todos;\n      } else {\n        var showComplete = false;\n        if (this.showTodoType == 'complete') {\n          showComplete = true\n        }\n        var filterTodos = {};\n\n        for (var key in this.todos) {\n          var todo = this.todos[key];\n          if (todo.isComplete == showComplete) {\n            filterTodos[key] = todo;\n            console.log(filterTodos[key]);\n          }\n        }\n        console.log(filterTodos);\n        return filterTodos;\n      }\n    }\n  },\n  methods: {\n    // DBのtodos/[uid]/以下にデータを格納していく\n    createTodo: function() {\n      if (this.newTodoName == \"\") { return; }\n      this.todosRef.push({\n        name: this.newTodoName,\n        isComplete: false,\n        date: this.deadline,\n      })\n      this.newTodoName = \"\";\n    },\n    // 完了・未完了の値の更新\n    updateIsCompleteTodo: function(todo, key) {\n      todo.isComplete = !todo.isComplete;\n      // DB内のデータを更新する\n      var updates = {};\n      // todo.idで変更するtodoタスクを指定し、dataが更新されたtodoを挿入する\n      updates[key] = todo;\n      this.todosRef.update(updates)\n    },\n    // todoの削除\n    deleteTodo: function(key) {\n      this.todosRef.child(key).remove();\n    }\n  }\n};\n</script>\n\n<style>\nh2 {\n  font-size: 100px;\n}\n</style>\n"],"sourceRoot":"src/components"}]}