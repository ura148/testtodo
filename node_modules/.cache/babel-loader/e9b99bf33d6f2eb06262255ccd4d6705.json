{"remainingRequest":"/Users/uratomo/test/node_modules/babel-loader/lib/index.js!/Users/uratomo/test/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/uratomo/test/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/uratomo/test/src/components/Task.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/uratomo/test/src/components/Task.vue","mtime":1593668747689},{"path":"/Users/uratomo/test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/uratomo/test/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/uratomo/test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/uratomo/test/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IGZpcmViYXNlIGZyb20gImZpcmViYXNlIjsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICJUYXNrIiwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgZGF0YWJhc2U6IG51bGwsCiAgICAgIHRvZG9zUmVmOiBudWxsLAogICAgICBuZXdUb2RvTmFtZTogIiIsCiAgICAgIHNob3dUb2RvVHlwZTogImFsbCIsCiAgICAgIHRvZG9zOiBbXQogICAgfTsKICB9LAogIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7CiAgICB0aGlzLmRhdGFiYXNlID0gZmlyZWJhc2UuZGF0YWJhc2UoKTsKICAgIHRoaXMudWlkID0gZmlyZWJhc2UuYXV0aCgpLmN1cnJlbnRVc2VyLnVpZDsgLy8gcmVm44GvcmVmZXJlbmNl44Gn44OH44O844K/44OZ44O844K544Gr44GC44KL54m55a6a44Gu6aCF55uu44KS5oyH44GX56S644GZ44Oh44K944OD44OJCgogICAgdGhpcy50b2Rvc1JlZiA9IHRoaXMuZGF0YWJhc2UucmVmKCJ0b2Rvcy8iICsgdGhpcy51aWQpOyAvLyDjg4fjg7zjgr/jgavlpInmm7TjgYzjgYLjgovjgajlrp/ooYzjgZXjgozjgotmdW5jdGlvbgoKICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgdGhpcy50b2Rvc1JlZi5vbigndmFsdWUnLCBmdW5jdGlvbiAoc25hcHNob3QpIHsKICAgICAgX3RoaXMudG9kb3MgPSBzbmFwc2hvdC52YWwoKTsgLy8g44OH44O844K/44Gr5aSJ5YyW44GM6LW344GN44Gf44Go44GN44Gr5YaN5Y+W5b6X44GZ44KLCiAgICB9KTsKICB9LAogIGNvbXB1dGVkOiB7CiAgICAvLyDjg5XjgqPjg6vjgr/jg7zjga7lrp/oo4VzaG93VG9kb1R5cGXjgYzlpInmm7TjgZXjgozjgovjgajlrp/ooYzjgZXjgozjgosKICAgIGZpbHRlcmVkVG9kb3M6IGZ1bmN0aW9uIGZpbHRlcmVkVG9kb3MoKSB7CiAgICAgIGlmICh0aGlzLnNob3dUb2RvVHlwZSA9PSAnYWxsJykgewogICAgICAgIHJldHVybiB0aGlzLnRvZG9zOwogICAgICB9IGVsc2UgewogICAgICAgIHZhciBzaG93SXNDb21wbGV0ZSA9IGZhbHNlOwoKICAgICAgICBpZiAodGhpcy5zaG93VG9kb1R5cGUgPT0gJ2NvbXBsZXRlJykgewogICAgICAgICAgc2hvd0lzQ29tcGxldGUgPSB0cnVlOwogICAgICAgIH0KCiAgICAgICAgdmFyIGZpbHRlclRvZG9zID0ge307CgogICAgICAgIGZvciAodmFyIGtleSBpbiB0aGlzLnRvZG9zKSB7CiAgICAgICAgICB2YXIgdG9kbyA9IHRoaXMudG9kb3Nba2V5XTsKCiAgICAgICAgICBpZiAodG9kby5pc0NvbXBsZXRlID09IHNob3dJc0NvbXBsZXRlKSB7CiAgICAgICAgICAgIGZpbHRlclRvZG9zW2tleV0gPSB0b2RvOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgY29uc29sZS5sb2coZmlsdGVyVG9kb3MpOwogICAgICAgIHJldHVybiBmaWx0ZXJUb2RvczsKICAgICAgfQogICAgfQogIH0sCiAgbWV0aG9kczogewogICAgLy8gRELjga50b2Rvcy9bdWlkXS/ku6XkuIvjgavjg4fjg7zjgr/jgpLmoLzntI3jgZfjgabjgYTjgY8KICAgIGNyZWF0ZVRvZG86IGZ1bmN0aW9uIGNyZWF0ZVRvZG8oKSB7CiAgICAgIC8vIOS9leOCguOBquOBkeOCjOOBsOOCv+OCueOCr+OBr+S9nOOCieOCjOOBquOBhAogICAgICBpZiAodGhpcy5uZXdUb2RvTmFtZSA9PSAiIikgewogICAgICAgIHJldHVybjsKICAgICAgfSAvLyBkYXRhYmFzZeOBq+OCv+OCueOCr+WQjeOBqOWujOS6huacquWujOS6hueKtuaFi+OCkuWFpeWKmwoKCiAgICAgIHRoaXMudG9kb3NSZWYucHVzaCh7CiAgICAgICAgbmFtZTogdGhpcy5uZXdUb2RvTmFtZSwKICAgICAgICBpc0NvbXBsZXRlOiBmYWxzZQogICAgICB9KTsKICAgICAgdGhpcy5uZXdUb2RvTmFtZSA9ICIiOwogICAgfSwKICAgIC8vIOWujOS6huODu+acquWujOS6huOBruWApOOBruabtOaWsAogICAgdXBkYXRlSXNDb21wbGV0ZVRvZG86IGZ1bmN0aW9uIHVwZGF0ZUlzQ29tcGxldGVUb2RvKHRvZG8sIGtleSkgewogICAgICB0b2RvLmlzQ29tcGxldGUgPSAhdG9kby5pc0NvbXBsZXRlOyAvLyBEQuWGheOBruODh+ODvOOCv+OCkuabtOaWsOOBmeOCiwoKICAgICAgdmFyIHVwZGF0ZXMgPSB7fTsgLy8gdG9kby5pZOOBp+WkieabtOOBmeOCi3RvZG/jgr/jgrnjgq/jgpLmjIflrprjgZfjgIFkYXRh44GM5pu05paw44GV44KM44GfdG9kb+OCkuaMv+WFpeOBmeOCiwoKICAgICAgdXBkYXRlc1trZXldID0gdG9kbzsKICAgICAgdGhpcy50b2Rvc1JlZi51cGRhdGUodXBkYXRlcyk7CiAgICB9LAogICAgLy8gdG9kb+OBruWJiumZpAogICAgZGVsZXRlVG9kbzogZnVuY3Rpb24gZGVsZXRlVG9kbyhrZXkpIHsKICAgICAgdGhpcy50b2Rvc1JlZi5jaGlsZChrZXkpLnJlbW92ZSgpOwogICAgfQogIH0KfTs="},{"version":3,"sources":["Task.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAsBA,OAAA,QAAA,MAAA,UAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,MADA;AAEA,EAAA,IAFA,kBAEA;AACA,WAAA;AACA,MAAA,QAAA,EAAA,IADA;AAEA,MAAA,QAAA,EAAA,IAFA;AAGA,MAAA,WAAA,EAAA,EAHA;AAIA,MAAA,YAAA,EAAA,KAJA;AAKA,MAAA,KAAA,EAAA;AALA,KAAA;AAOA,GAVA;AAWA,EAAA,OAAA,EAAA,mBAAA;AACA,SAAA,QAAA,GAAA,QAAA,CAAA,QAAA,EAAA;AACA,SAAA,GAAA,GAAA,QAAA,CAAA,IAAA,GAAA,WAAA,CAAA,GAAA,CAFA,CAGA;;AACA,SAAA,QAAA,GAAA,KAAA,QAAA,CAAA,GAAA,CAAA,WAAA,KAAA,GAAA,CAAA,CAJA,CAKA;;AACA,QAAA,KAAA,GAAA,IAAA;;AACA,SAAA,QAAA,CAAA,EAAA,CAAA,OAAA,EAAA,UAAA,QAAA,EAAA;AACA,MAAA,KAAA,CAAA,KAAA,GAAA,QAAA,CAAA,GAAA,EAAA,CADA,CACA;AACA,KAFA;AAGA,GArBA;AAsBA,EAAA,QAAA,EAAA;AACA;AACA,IAAA,aAAA,EAAA,yBAAA;AACA,UAAA,KAAA,YAAA,IAAA,KAAA,EAAA;AACA,eAAA,KAAA,KAAA;AACA,OAFA,MAEA;AACA,YAAA,cAAA,GAAA,KAAA;;AACA,YAAA,KAAA,YAAA,IAAA,UAAA,EAAA;AACA,UAAA,cAAA,GAAA,IAAA;AACA;;AACA,YAAA,WAAA,GAAA,EAAA;;AACA,aAAA,IAAA,GAAA,IAAA,KAAA,KAAA,EAAA;AACA,cAAA,IAAA,GAAA,KAAA,KAAA,CAAA,GAAA,CAAA;;AACA,cAAA,IAAA,CAAA,UAAA,IAAA,cAAA,EAAA;AACA,YAAA,WAAA,CAAA,GAAA,CAAA,GAAA,IAAA;AACA;AACA;;AACA,QAAA,OAAA,CAAA,GAAA,CAAA,WAAA;AACA,eAAA,WAAA;AACA;AACA;AApBA,GAtBA;AA4CA,EAAA,OAAA,EAAA;AACA;AACA,IAAA,UAAA,EAAA,sBAAA;AACA;AACA,UAAA,KAAA,WAAA,IAAA,EAAA,EAAA;AACA;AACA,OAJA,CAKA;;;AACA,WAAA,QAAA,CAAA,IAAA,CAAA;AACA,QAAA,IAAA,EAAA,KAAA,WADA;AAEA,QAAA,UAAA,EAAA;AAFA,OAAA;AAIA,WAAA,WAAA,GAAA,EAAA;AACA,KAbA;AAcA;AACA,IAAA,oBAAA,EAAA,8BAAA,IAAA,EAAA,GAAA,EAAA;AACA,MAAA,IAAA,CAAA,UAAA,GAAA,CAAA,IAAA,CAAA,UAAA,CADA,CAEA;;AACA,UAAA,OAAA,GAAA,EAAA,CAHA,CAIA;;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,GAAA,IAAA;AACA,WAAA,QAAA,CAAA,MAAA,CAAA,OAAA;AACA,KAtBA;AAuBA;AACA,IAAA,UAAA,EAAA,oBAAA,GAAA,EAAA;AACA,WAAA,QAAA,CAAA,KAAA,CAAA,GAAA,EAAA,MAAA;AACA;AA1BA;AA5CA,CAAA","sourcesContent":["<template>\n  <div class=\"task\">\n     <h2>タスク</h2>\n    <div>\n      <!-- 初期はVーmodelで\"newTodoName\"を入れているが空白、故にタスク作った後に空白にしないとミスが起こる -->\n      <input type=\"text\" v-model=\"newTodoName\">\n      <button type=\"submit\" v-on:click=\"createTodo()\">タスク作成</button>\n    </div>\n    <ul>\n      <li><button type=\"submit\" v-on:click=\"showTodoType = 'all'\">すべて</button></li>\n      <li><button type=\"submit\" v-on:click=\"showTodoType = 'active'\">未完タスク一覧</button></li>\n      <li><button type=\"submit\" v-on:click=\"showTodoType = 'complete'\">完了タスク一覧</button></li>\n    </ul>\n    <!-- todoの一覧表示 -->\n    <ul v-for=\"(todo, key) in filteredTodos\" :key=\"todo.id\">\n      <li><input type=\"checkbox\" v-model=\"todo.isComplete\" v-on:click=\"updateIsCompleteTodo(todo, key)\">{{ todo.name + key }}</li>\n      <button type=\"submit\" v-on:click=\"deleteTodo(key)\">削除</button>\n    </ul>\n  </div>\n</template>\n\n<script>\nimport firebase from \"firebase\";\n\nexport default {\n  name: \"Task\",\n  data() {\n    return {\n      database: null,\n      todosRef: null,\n      newTodoName: \"\",\n      showTodoType: \"all\",\n      todos: []\n    };\n  },\n  created: function() {\n    this.database = firebase.database();\n    this.uid = firebase.auth().currentUser.uid;\n    // refはreferenceでデータベースにある特定の項目を指し示すメソッド\n    this.todosRef = this.database.ref(\"todos/\" + this.uid);\n    // データに変更があると実行されるfunction\n    var _this = this;\n    this.todosRef.on('value', function(snapshot) {\n      _this.todos = snapshot.val(); // データに変化が起きたときに再取得する\n    });\n  },\n  computed: {\n    // フィルターの実装showTodoTypeが変更されると実行される\n    filteredTodos: function () {\n      if (this.showTodoType == 'all') {\n        return this.todos;\n      } else {\n        var showIsComplete = false;\n        if (this.showTodoType == 'complete') {\n          showIsComplete = true\n        }\n        var filterTodos = {};\n        for (var key in this.todos) {\n          var todo = this.todos[key];\n          if (todo.isComplete == showIsComplete) {\n            filterTodos[key] = todo;\n          }\n        }\n        console.log(filterTodos);\n        return filterTodos;\n      }\n    }\n  },\n  methods: {\n    // DBのtodos/[uid]/以下にデータを格納していく\n    createTodo: function() {\n      // 何もなければタスクは作られない\n      if (this.newTodoName == \"\") {\n        return;\n      }\n      // databaseにタスク名と完了未完了状態を入力\n      this.todosRef.push({\n        name: this.newTodoName,\n        isComplete: false\n      });\n      this.newTodoName = \"\"\n    },\n    // 完了・未完了の値の更新\n    updateIsCompleteTodo: function(todo, key) {\n      todo.isComplete = !todo.isComplete;\n      // DB内のデータを更新する\n      var updates = {};\n      // todo.idで変更するtodoタスクを指定し、dataが更新されたtodoを挿入する\n      updates[key] = todo;\n      this.todosRef.update(updates)\n    },\n    // todoの削除\n    deleteTodo: function(key) {\n      this.todosRef.child(key).remove();\n    }\n  }\n};\n</script>\n\n<style>\n</style>\n"],"sourceRoot":"src/components"}]}