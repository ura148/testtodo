{"remainingRequest":"/Users/uratomo/test/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/uratomo/test/src/components/Task.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/uratomo/test/src/components/Task.vue","mtime":1593694569635},{"path":"/Users/uratomo/test/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/uratomo/test/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/uratomo/test/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/uratomo/test/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/uratomo/test/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKaDIgewogIGZvbnQtc2l6ZTogMTAwcHg7Cn0K"},{"version":3,"sources":["Task.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyGA;AACA;AACA","file":"Task.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"task\">\n     <h2>タスク</h2>\n    <div>\n      <!-- 初期はVーmodelで\"newTodoName\"を入れているが空白、故にタスク作った後に空白にしないとミスが起こる -->\n      <input type=\"text\" v-model=\"newTodoName\">\n      <input type=\"date\" v-model=\"deadline\">\n      <button type=\"submit\" v-on:click=\"createTodo()\">タスク作成</button>\n    </div>\n    <ul>\n      <li><button type=\"submit\" v-on:click=\"showTodoType = 'all'\">すべて</button></li>\n      <li><button type=\"submit\" v-on:click=\"showTodoType = 'active'\">未完タスク一覧</button></li>\n      <li><button type=\"submit\" v-on:click=\"showTodoType = 'complete'\">完了タスク一覧</button></li>\n    </ul>\n    <!-- todoの一覧表示 -->\n    <ul v-for=\"(todo, key) in filteredTodos\" :key=\"todo.id\">\n      <li class=\"card\">\n        <input type=\"checkbox\" v-model=\"todo.isComplete\" v-on:click=\"updateIsCompleteTodo(todo, key)\">\n        <p>{{ todo.name }}</p>\n        <p>{{ todo.date }}</p>\n      </li>\n      <button type=\"submit\" v-on:click=\"deleteTodo(key)\">削除</button>\n    </ul>\n  </div>\n</template>\n\n<script>\nimport firebase from \"firebase\";\n\nexport default {\n  name: \"Task\",\n  data() {\n    return {\n      database: null,\n      todosRef: null,\n      newTodoName: \"\",\n      deadline:\"\",\n      showTodoType: \"all\",\n      todos: []\n    };\n  },\n  created: function() {\n    this.database = firebase.database();\n    this.uid = firebase.auth().currentUser.uid;\n    // refはreferenceでデータベースにある特定の項目を指し示すメソッド\n    this.todosRef = this.database.ref(\"todos/\" + this.uid);\n    // データに変更があると実行されるfunction\n    var _this = this;\n    this.todosRef.on('value', function(snapshot) {\n      _this.todos = snapshot.val(); // データに変化が起きたときに再取得する\n    });\n  },\n  computed: {\n    // フィルターの実装showTodoTypeが変更されると実行される\n    filteredTodos: function () {\n      if (this.showTodoType == 'all') {\n        return this.todos;\n      } else {\n        var showComplete = false;\n        if (this.showTodoType == 'complete') {\n          showComplete = true\n        }\n        var filterTodos = {};\n\n        for (var key in this.todos) {\n          var todo = this.todos[key];\n          if (todo.isComplete == showComplete) {\n            filterTodos[key] = todo;\n            console.log(filterTodos[key]);\n          }\n        }\n        console.log(filterTodos);\n        return filterTodos;\n      }\n    }\n  },\n  methods: {\n    // DBのtodos/[uid]/以下にデータを格納していく\n    createTodo: function() {\n      if (this.newTodoName == \"\") { return; }\n      this.todosRef.push({\n        name: this.newTodoName,\n        isComplete: false,\n        date: this.deadline,\n      })\n      this.newTodoName = \"\";\n    },\n    // 完了・未完了の値の更新\n    updateIsCompleteTodo: function(todo, key) {\n      todo.isComplete = !todo.isComplete;\n      // DB内のデータを更新する\n      var updates = {};\n      // todo.idで変更するtodoタスクを指定し、dataが更新されたtodoを挿入する\n      updates[key] = todo;\n      this.todosRef.update(updates)\n    },\n    // todoの削除\n    deleteTodo: function(key) {\n      this.todosRef.child(key).remove();\n    }\n  }\n};\n</script>\n\n<style>\nh2 {\n  font-size: 100px;\n}\n</style>\n"]}]}